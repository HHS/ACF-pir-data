"""Class for mocking PIR data"""

import os
import re
import tempfile
from unittest.mock import MagicMock

import openpyxl as opxl
import pandas as pd

from pir_pipeline.ingestion.PIRIngestor import PIRIngestor

SECTION_ID_COLUMNS = [
    [None, "Region"],
    [None, "State"],
    [None, "Grant Number"],
    [None, "Program Number"],
    [None, "Type"],
    [None, "Grantee"],
    [None, "Program"],
    [None, "City"],
    [None, "ZIP Code"],
    [None, "ZIP 4"],
]

VALID_QUESTION_COLUMNS = [
    ["Question NameX1", "X.1"],
    ["Question NameX2", "X.2"],
    ["Question NameX3", "X.3"],
    ["Question NameX4", "X.4"],
    ["Question NameX5", "X.5"],
]

INVALID_QUESTION_COLUMNS = [
    ["Question NameX1", "X.1"],
    ["Question NameX2", "X.2"],
    ["Question NameX3", "X.3"],
    ["Question NameX4", "X.4"],
    [None, "X.5"],
]

PROGRAM_COLUMNS = [
    "Region",
    "Grant Number",
    "Program Number",
    "Program Type",
    "Grantee Name",
    "Program Name",
    "Program Agency Type",
    "Program Agency Description",
    "Program Address Line 1",
    "Program Address Line 2",
    "Program City",
    "Program State",
    "Program ZIP Code",
    "Program ZIP 4",
    "Program Main Phone Number",
    "Program Main Email",
]

REFERENCE_COLUMNS = [
    "Category",
    "Section",
    "Subsection",
    "Question Order",
    "Question Number",
    "Question Name",
    "Type",
    "Question Text",
]

DB_COLUMNS = {
    "program": [
        "uid",
        "year",
        "grantee_name",
        "grant_number",
        "program_address_line_1",
        "program_address_line_2",
        "program_agency_description",
        "program_agency_type",
        "program_city",
        "program_email",
        "program_name",
        "program_number",
        "program_phone",
        "program_type",
        "program_state",
        "program_zip1",
        "program_zip2",
        "region",
    ],
    "question": [
        "question_id",
        "year",
        "category",
        "question_name",
        "question_number",
        "question_order",
        "question_text",
        "question_type",
        "section",
        "subsection",
        "uqid",
    ],
    "response": ["uid", "question_id", "year", "answer"],
}


class MockData:
    """Class for mocking PIR data."""

    def __init__(self, year: int | list[int] = 2008, valid: bool = True):
        """Initialize attributes"""
        self._valid = valid
        self._year = year
        self._workbooks = {}
        self._sheets = []
        self.path = ""

        self.data_specifications()

    @property
    def year(self):
        """Year for which to mock data"""
        return self._year

    @property
    def workbooks(self):
        """Dictionary of mocked workbooks"""
        return self._workbooks

    @property
    def sheets(self):
        """List of mocked sheet names"""
        return self._sheets

    @property
    def data(self):
        """Dictionary of pandas data frames generated by export"""
        return self._data

    def data_specifications(self):
        """Set up data specifications"""

        if self._valid:
            question_columns = VALID_QUESTION_COLUMNS
        else:
            question_columns = INVALID_QUESTION_COLUMNS

        if not isinstance(self._year, list):
            self._year = [self._year]

        specs = {}
        for year in self._year:
            specs[f"pir_export_{year}"] = {
                "Section A": {
                    "sheet": "Section A",
                    "columns": SECTION_ID_COLUMNS + question_columns,
                },
                "Section B": {
                    "sheet": "Section B",
                    "columns": SECTION_ID_COLUMNS + question_columns,
                },
                "Section C": {
                    "sheet": "Section C",
                    "columns": SECTION_ID_COLUMNS + question_columns,
                },
                "Section D": {
                    "sheet": "Section D",
                    "columns": SECTION_ID_COLUMNS + question_columns,
                },
                "Program Details": {
                    "sheet": "Program Details",
                    "columns": PROGRAM_COLUMNS,
                },
                "Reference": {"sheet": "Reference", "columns": REFERENCE_COLUMNS},
            }

        self._specs = specs
        return self

    def generate_rows(self, columns: list[str], type: str):
        """Generate mock data

        Parameters:
            type (str): The sheet type, one of self._specs['sheet']

        Returns:
            MockData: Returns an object of class MockData
        """

        def replace_question_section_id_value(colname: str | None, section_id: str):
            """Replace the "X" in the column name with the section ID."""
            if colname:
                return re.sub("X", section_id, colname)
            return colname

        # set header rows
        rows = [columns]
        program_count = 10

        # generate mock data
        if "Section" in type:
            # Section sheets have multi-header rows
            rows = []
            assert re.search("[ABCD]", type)[0], "Unexpected section sheet name."
            section = re.search("[ABCD]", type)[0]

            # header rows for Section sheets
            for i in range(len(columns[0])):
                new_row = [
                    replace_question_section_id_value(row[i], section)
                    for row in columns
                ]
                rows.append(new_row)

            for i in range(program_count):
                mod_id = str(i)
                new_row = ["Region " + mod_id]
                new_row += [mod_id] * (len(columns) - 1)
                rows.append(new_row)

        if "Reference" in type:
            for i in range(20):
                range_map = {0: "A", 1: "B", 2: "C", 3: "D"}
                section = range_map.get(i // 5, None)

                if i % 5 != 0:
                    question_number = section + "." + str(i % 5 + 1)
                else:
                    question_number = "N/A"

                question_name = "Question Name" + section + str(i % 5 + 1)
                new_row = [
                    "CAT",
                    "D",
                    "",
                    i,
                    question_number,
                    question_name,
                    "HS",
                    "Some question text",
                ]
                rows.append(new_row)

            # invalid reference sheet has one duplicate row, the last one generated
            if not self._valid:
                rows.append(new_row)

        if "Program" in type:
            for i in range(program_count):
                mod_id = str(i)
                new_row = ["Region " + mod_id]
                new_row += [mod_id] * 5
                new_row += ["T" + mod_id, "D" + mod_id, "ADD" + mod_id]
                if i % 2:
                    add_2 = "ADD2" + mod_id
                else:
                    add_2 = ""
                new_row += [add_2]
                new_row += [mod_id] * 4
                new_row += ["P" + mod_id, "E" + mod_id]
                rows.append(new_row)

        self._rows = rows

        return self

    def generate_data(self):
        """Store the mock data in an openpyxl Workbook object.

        Returns:
            MockData: Returns an object of class MockData.
        """
        for workbook in self._specs:
            path = f"{workbook}.xlsx"
            wb = opxl.Workbook()
            worksheets = self._specs[workbook]

            i = 0
            for worksheet in worksheets:
                name = worksheets[worksheet]["sheet"]
                columns = worksheets[worksheet]["columns"]
                if i == 0:
                    ws = wb.active
                    ws.title = name
                else:
                    wb.create_sheet(name)
                    ws = wb[name]

                self.generate_rows(columns, name)
                for row in self._rows:
                    ws.append(row)

                i += 1

            self._workbooks.update({path: wb})

        return self

    def export(self, directory: str = None, how: str = None):
        """Export mock data to a physical location or Pandas ExcelFile

        Parameters:
            dir (str, optional): String path to a physical directory. Defaults to None.
            pandas (bool, optional): Boolean indicating whether to export to pandas. Defaults to False.
        """
        assert (directory or how) and not (
            directory and how
        ), "One of `dir` or `pandas` must be specified."
        if directory:
            for path, wb in self._workbooks.items():
                path = os.path.join(directory, path)
                wb.save(path)
                wb.close()
                self.path = path

        elif how == "ExcelFile":
            self._data = {}
            for path, wb in self._workbooks.items():
                self._data[path] = pd.ExcelFile(wb, engine="openpyxl")
        elif how == "DataFrame":
            self._data = {}
            for path, wb in self._workbooks.items():
                self._data[path] = {}
                for sheet in wb.sheetnames:
                    self._data[path][sheet] = pd.read_excel(
                        wb, sheet, engine="openpyxl"
                    )
        elif how == "Insertable":
            self._data = {}
            ingestor = PIRIngestor.__new__(PIRIngestor)
            for path, wb in self._workbooks.items():
                ingestor._workbook = pd.ExcelFile(wb, engine="openpyxl")
                ingestor._sheets = wb.sheetnames
                ingestor._year = re.search(r"\d{4}", path).group(0)
                ingestor._metrics = {}
                ingestor._data = {}
                ingestor._logger = MagicMock()
                ingestor._sql = MagicMock()
                ingestor._sql.get_columns = MagicMock(side_effect=DB_COLUMNS.get)
                (
                    ingestor.load_data()
                    .append_sections()
                    .merge_response_question()
                    .clean_pir_data()
                    .validate_data()
                )
                self._data[path] = ingestor._data

        return self


if __name__ == "__main__":
    # from otld.paths import test_dir
    temp_dir = tempfile.TemporaryDirectory()
    temp_dir_name = temp_dir.name

    mock_data = MockData(2008, valid=True)
    mock_data.generate_data().export(how="Insertable")
    print(mock_data._data)
    # mock_data.export(os.path.join(test_dir, "mock"))
